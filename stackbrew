#!/usr/bin/env python

import os
import sys
import json
import yaml
import shutil
import subprocess


def buildpacks():
    """ Return all available buildpacks and their filesystem path. """
    if not os.environ.get("BUILDPACKS"):
        return {}
    buildpacks = {}
    for buildpack_dir in os.environ["BUILDPACKS"].split(":"):
        for buildpack in os.listdir(buildpack_dir):
            if not buildpack.startswith("."):
                if buildpack not in buildpacks:
                    buildpacks[buildpack] = os.path.join(buildpack_dir, buildpack)
    return buildpacks


def get_buildpack_dir(buildpack):
    """ Search for `buildpack` using the BUILDPACKS environment variable.
        Default to the litteral filesystem path.
    """
    if os.path.exists(buildpack):
        return buildpack
    return buildpacks()[buildpack]


def get_buildpack_requirements(buildpack_dir, build_dir):
    """ Return the env requirements of a buildpack, as returned by its bin/require. """
    p = call_script(os.path.join(buildpack_dir, "bin/require"), build_dir, stdout=subprocess.PIPE)
    if not p:
        return []
    return [l.strip() for l in p.stdout.readlines()]

def get_buildpack_cache_root():
    return os.path.expanduser("~/.stackbrew/cache")

def get_buildpack_cache(buildpack):
    return os.path.join(get_buildpack_cache_root(), buildpack)

def detect_buildpack(source_dir):
    ref = "{source_dir}/buildpack".format(**locals())
    if not os.path.exists(ref):
        return None
    buildpack = file(ref).readline().strip()
    buildpack_in_source = "{source_dir}/{buildpack}".format(**locals())
    if os.path.exists(buildpack_in_source):
        return buildpack_in_source
    else:
        return buildpack

def build_service(build_dir, buildpack):
    """ Build the service in-place at `build_dir` using `buildpack`.
    """
    buildpack_dir = get_buildpack_dir(buildpack)
    cache_dir = get_buildpack_cache(buildpack)
    service_name = os.path.basename(build_dir)
    if not os.path.exists(cache_dir):
        os.makedirs(cache_dir)
    print "['{build_dir}'] building service '{service_name}' with buildpack '{buildpack}' and cache '{cache_dir}'".format(**locals())
    call_script(os.path.join(buildpack_dir, "bin/compile"), build_dir, cache_dir)
    p = call_script(os.path.join(buildpack_dir, "bin/release"), build_dir, stdout=subprocess.PIPE)
    if not p:
        return {}
    return dict(yaml.load(p.stdout.read()))


def call_script(path, *args, **kw):
    if not os.path.exists(path):
        return None
    os.chmod(mkpath(path), 0700)
    p = subprocess.Popen((path,) + args, **kw)
    p.wait()
    return p


def mkpath(path):
    if type(path) == str:
        return path
    return os.path.join(*path)

def copy(src, dst):
    """ Copy a directory from `src` to `dst`. """
    src = mkpath(src)
    dst = mkpath(dst)
    print "Copying {src} to {dst}".format(**locals())
    shutil.copytree(src, dst)

def mkfile(path, x=False, **kw):
    """ Create a file, and the enclosing directory if it doesn't exist.
        Extra keywords are passed to the file constructor.
    """
    path = mkpath(path)
    dir = os.path.dirname(path)
    if not os.path.exists(dir):
        os.makedirs(dir)
    f = file(path, "w", **kw)
    if x:
        # FIXME: this is me being too lazy to look up how to do `chmod +x` cleanly in python
        os.chmod(path, 0700)
    return f


def getfile(path):
    return file(mkpath(path))


def cmd_buildreqs(source_dir, buildpack):
    for req in get_buildpack_requirements(get_buildpack_dir(buildpack), source_dir):
        print req

def cmd_build(source_dir, build_dir, buildpack=None):
    """ Build the application source code at `source_dir` into `build_dir`.
        The build will fail if build_dir alread exists.
    """
    if not buildpack:
        buildpack = detect_buildpack(source_dir)
        if not buildpack:
            print "Could not detect buildpack. Aborting."
            sys.exit(1)
    print "{source_dir} -> {buildpack}".format(**locals())
    copy(source_dir, build_dir)
    release_config = build_service(build_dir, buildpack)
    file("{build_dir}/release.json".format(**locals()), "w").write(json.dumps(release_config, indent=1))


def cmd_buildpacks():
    for (buildpack, dir) in sorted(buildpacks().items()):
        print "{0}:\t{1}".format(buildpack, dir)


def main():
    cmd, args = sys.argv[1], sys.argv[2:]
    eval("cmd_{cmd}".format(cmd=cmd))(*args)

if __name__ == '__main__':
    main()
